# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class OfferDetail:
  """
  Attributes:
   - price
   - qty
   - seq
  """

  thrift_spec = None
  def __init__(self, price=None, qty=None, seq=None,):
    self.price = price
    self.qty = qty
    self.seq = seq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.DOUBLE:
          self.qty = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.I16:
          self.seq = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OfferDetail')
    if self.seq is not None:
      oprot.writeFieldBegin('seq', TType.I16, -3)
      oprot.writeI16(self.seq)
      oprot.writeFieldEnd()
    if self.qty is not None:
      oprot.writeFieldBegin('qty', TType.DOUBLE, -2)
      oprot.writeDouble(self.qty)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, -1)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.qty)
    value = (value * 31) ^ hash(self.seq)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Quotation:
  """
  Attributes:
   - code
   - time
   - lastClose
   - open
   - price
   - profit
   - max
   - min
   - amount
   - qty
   - inDish
   - outDish
   - tp
   - status
   - turnoverRate
   - amplitude
   - floating
   - total
   - floatingValue
   - totalValue
   - buylist
   - selllist
  """

  thrift_spec = None
  def __init__(self, code=None, time=None, lastClose=None, open=None, price=None, profit=None, max=None, min=None, amount=None, qty=None, inDish=None, outDish=None, tp=None, status=None, turnoverRate=None, amplitude=None, floating=None, total=None, floatingValue=None, totalValue=None, buylist=None, selllist=None,):
    self.code = code
    self.time = time
    self.lastClose = lastClose
    self.open = open
    self.price = price
    self.profit = profit
    self.max = max
    self.min = min
    self.amount = amount
    self.qty = qty
    self.inDish = inDish
    self.outDish = outDish
    self.tp = tp
    self.status = status
    self.turnoverRate = turnoverRate
    self.amplitude = amplitude
    self.floating = floating
    self.total = total
    self.floatingValue = floatingValue
    self.totalValue = totalValue
    self.buylist = buylist
    self.selllist = selllist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.STRING:
          self.time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.DOUBLE:
          self.lastClose = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.DOUBLE:
          self.open = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.DOUBLE:
          self.profit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.DOUBLE:
          self.max = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -8:
        if ftype == TType.DOUBLE:
          self.min = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -9:
        if ftype == TType.DOUBLE:
          self.amount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -10:
        if ftype == TType.DOUBLE:
          self.qty = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -11:
        if ftype == TType.DOUBLE:
          self.inDish = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -12:
        if ftype == TType.DOUBLE:
          self.outDish = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -13:
        if ftype == TType.STRING:
          self.tp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -14:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -15:
        if ftype == TType.DOUBLE:
          self.turnoverRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -16:
        if ftype == TType.DOUBLE:
          self.amplitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -17:
        if ftype == TType.DOUBLE:
          self.floating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -18:
        if ftype == TType.DOUBLE:
          self.total = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -19:
        if ftype == TType.DOUBLE:
          self.floatingValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -20:
        if ftype == TType.DOUBLE:
          self.totalValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -21:
        if ftype == TType.LIST:
          self.buylist = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = OfferDetail()
            _elem5.read(iprot)
            self.buylist.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -22:
        if ftype == TType.LIST:
          self.selllist = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = OfferDetail()
            _elem11.read(iprot)
            self.selllist.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Quotation')
    if self.selllist is not None:
      oprot.writeFieldBegin('selllist', TType.LIST, -22)
      oprot.writeListBegin(TType.STRUCT, len(self.selllist))
      for iter12 in self.selllist:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.buylist is not None:
      oprot.writeFieldBegin('buylist', TType.LIST, -21)
      oprot.writeListBegin(TType.STRUCT, len(self.buylist))
      for iter13 in self.buylist:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalValue is not None:
      oprot.writeFieldBegin('totalValue', TType.DOUBLE, -20)
      oprot.writeDouble(self.totalValue)
      oprot.writeFieldEnd()
    if self.floatingValue is not None:
      oprot.writeFieldBegin('floatingValue', TType.DOUBLE, -19)
      oprot.writeDouble(self.floatingValue)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.DOUBLE, -18)
      oprot.writeDouble(self.total)
      oprot.writeFieldEnd()
    if self.floating is not None:
      oprot.writeFieldBegin('floating', TType.DOUBLE, -17)
      oprot.writeDouble(self.floating)
      oprot.writeFieldEnd()
    if self.amplitude is not None:
      oprot.writeFieldBegin('amplitude', TType.DOUBLE, -16)
      oprot.writeDouble(self.amplitude)
      oprot.writeFieldEnd()
    if self.turnoverRate is not None:
      oprot.writeFieldBegin('turnoverRate', TType.DOUBLE, -15)
      oprot.writeDouble(self.turnoverRate)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, -14)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.tp is not None:
      oprot.writeFieldBegin('tp', TType.STRING, -13)
      oprot.writeString(self.tp)
      oprot.writeFieldEnd()
    if self.outDish is not None:
      oprot.writeFieldBegin('outDish', TType.DOUBLE, -12)
      oprot.writeDouble(self.outDish)
      oprot.writeFieldEnd()
    if self.inDish is not None:
      oprot.writeFieldBegin('inDish', TType.DOUBLE, -11)
      oprot.writeDouble(self.inDish)
      oprot.writeFieldEnd()
    if self.qty is not None:
      oprot.writeFieldBegin('qty', TType.DOUBLE, -10)
      oprot.writeDouble(self.qty)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.DOUBLE, -9)
      oprot.writeDouble(self.amount)
      oprot.writeFieldEnd()
    if self.min is not None:
      oprot.writeFieldBegin('min', TType.DOUBLE, -8)
      oprot.writeDouble(self.min)
      oprot.writeFieldEnd()
    if self.max is not None:
      oprot.writeFieldBegin('max', TType.DOUBLE, -7)
      oprot.writeDouble(self.max)
      oprot.writeFieldEnd()
    if self.profit is not None:
      oprot.writeFieldBegin('profit', TType.DOUBLE, -6)
      oprot.writeDouble(self.profit)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, -5)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.open is not None:
      oprot.writeFieldBegin('open', TType.DOUBLE, -4)
      oprot.writeDouble(self.open)
      oprot.writeFieldEnd()
    if self.lastClose is not None:
      oprot.writeFieldBegin('lastClose', TType.DOUBLE, -3)
      oprot.writeDouble(self.lastClose)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.STRING, -2)
      oprot.writeString(self.time)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, -1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.lastClose)
    value = (value * 31) ^ hash(self.open)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.profit)
    value = (value * 31) ^ hash(self.max)
    value = (value * 31) ^ hash(self.min)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.qty)
    value = (value * 31) ^ hash(self.inDish)
    value = (value * 31) ^ hash(self.outDish)
    value = (value * 31) ^ hash(self.tp)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.turnoverRate)
    value = (value * 31) ^ hash(self.amplitude)
    value = (value * 31) ^ hash(self.floating)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.floatingValue)
    value = (value * 31) ^ hash(self.totalValue)
    value = (value * 31) ^ hash(self.buylist)
    value = (value * 31) ^ hash(self.selllist)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleQuotation:
  """
  Attributes:
   - code
   - price
   - profit
   - qty
   - tp
   - time
   - status
  """

  thrift_spec = None
  def __init__(self, code=None, price=None, profit=None, qty=None, tp=None, time=None, status=None,):
    self.code = code
    self.price = price
    self.profit = profit
    self.qty = qty
    self.tp = tp
    self.time = time
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.DOUBLE:
          self.profit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.DOUBLE:
          self.qty = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.STRING:
          self.tp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.STRING:
          self.time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleQuotation')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, -7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.STRING, -6)
      oprot.writeString(self.time)
      oprot.writeFieldEnd()
    if self.tp is not None:
      oprot.writeFieldBegin('tp', TType.STRING, -5)
      oprot.writeString(self.tp)
      oprot.writeFieldEnd()
    if self.qty is not None:
      oprot.writeFieldBegin('qty', TType.DOUBLE, -4)
      oprot.writeDouble(self.qty)
      oprot.writeFieldEnd()
    if self.profit is not None:
      oprot.writeFieldBegin('profit', TType.DOUBLE, -3)
      oprot.writeDouble(self.profit)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, -2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, -1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.profit)
    value = (value * 31) ^ hash(self.qty)
    value = (value * 31) ^ hash(self.tp)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
